plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'net.neoforged.moddev' version '1.0.0'
    id 'io.github.goooler.shadow' version '8.1.8'
}

group = 'org.jedi'
version = project.mod_version
base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

neoForge {
    version = project.neo_version

    parchment {
        minecraftVersion = project.minecraft_version
        mappingsVersion = project.parchment_version
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.INFO
            gameDirectory = project.file('run')
        }
        client {
            client()
        }
        server {
            server()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

repositories {
    mavenCentral()
}

dependencies {
    additionalRuntimeClasspath(library("org.javacord:javacord:${javacord_version}")) {
        exclude group: 'org.jetbrains'
    }
    additionalRuntimeClasspath(library('org.apache.logging.log4j:log4j-api:2.17.2'))
}

jar {
    archiveClassifier = 'slim'
}

shadowJar {
    configurations = [project.configurations.library]
    archiveClassifier = ''
    [
            'com.codahale',
            'com.fasterxml',
            'com.neovisionaries',
            'io.vavr',
            'javax.annotation',
            'kotlin',
            'okhttp3',
            'okio',
            'org.apache.logging.log4j',
            'org.bouncycastle',
            'org.javacord',
    ].forEach {
        relocate it, "shadowjedi.$it"
    }
    mergeServiceFiles()
}

assemble.dependsOn(shadowJar)

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_id                 : mod_id,
            mod_version            : mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
